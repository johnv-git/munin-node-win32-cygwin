#!/usr/bin/perl
# /*
#  * memory_percent - a plugin for munin-node-win32-cygwin
#  *
#  * Copyright (c) 2015 John Vinopal
#  * Licensed under the MIT license.
#  */
use strict;
use warnings;
use Win32Helper;

#
# Munin plugin to monitor memory statistics.
#
# Parameters:
#       config
#       autoconf
#
# Requirements:
#	Cygwin, perl, and perl-libwin32 package or equivalent
#

# Alert levels
our $WARNING  = 90;
our $CRITICAL = 95;

# Performance Data from Win32 OperatingSystem class.
https://msdn.microsoft.com/en-us/library/aa394239(v=vs.85).aspx
my $win32Namespace = 'winmgmts://./root/cimv2';
my $win32Class     = 'Win32_OperatingSystem';
my @win32Props =
  qw(TotalVisibleMemorySize FreePhysicalMemory SizeStoredInPagingFiles FreeSpaceInPagingFiles);

# Munin Configuration
if (@ARGV) {
    if ( $ARGV[0] eq 'autoconf' ) {
        print "yes\n";
        exit 0;
    }
    elsif ( $ARGV[0] eq 'config' ) {
        print "graph_category system\n";
        print "graph_title Memory usage in percent\n";
        print "graph_args --lower-limit 0 --upper-limit 100\n";
        print "graph_vlabel %\n";
        print "graph_scale no\n";
        print "graph_info This graph shows memory usage on the machine.\n";

        print "memused.label Physical Memory\n";
        print "memused.warning $WARNING\n";
        print "memused.critical $CRITICAL\n";
        print "swapused.label Swap Memory\n";
        print "swapused.warning $WARNING\n";
        print "swapused.critical $CRITICAL\n";
        exit 0;
    }
    else {
        print "Unknown arg $ARGV[0]\n";
        exit 1;
    }

}

# Munin Data
my $values     = fetchMemoryValues();
my ($computer) = keys %$values;
my $total_mem  = $values->{$computer}->{TotalVisibleMemorySize};
my $free_mem   = $values->{$computer}->{FreePhysicalMemory};
my $total_swap = $values->{$computer}->{SizeStoredInPagingFiles};
my $free_swap  = $values->{$computer}->{FreeSpaceInPagingFiles};

# Percent used
printf "memused.value %.2f\n",
  ( ( $total_mem - $free_mem ) / $total_mem * 100 );
printf "swapused.value %.2f\n",
  ( ( $total_swap - $free_swap ) / $total_swap * 100 );
exit 0;

# Return memory counters.
sub fetchMemoryValues {
    return getWin32Props( $win32Namespace, $win32Class, @win32Props );
}
